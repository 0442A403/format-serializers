version: '3.8'
services:
  proxy:
    restart: unless-stopped
    networks: [serializers]
    image: 0442a403/hse:serializer-proxy
    build:
      dockerfile: proxy.Dockerfile
    ports: ["2000:2000"]
    env_file: env

  json:
    restart: unless-stopped
    networks: [serializers]
    image: 0442a403/hse:serializer-json
    build:
      dockerfile: serializer.Dockerfile
      args:
        data_format: json
    env_file: env

  yaml:
    restart: unless-stopped
    networks: [serializers]
    image: 0442a403/hse:serializer-yaml
    build:
      dockerfile: serializer.Dockerfile
      args:
        data_format: yaml
    env_file: env

  xml:
    restart: unless-stopped
    networks: [serializers]
    image: 0442a403/hse:serializer-xml
    build:
      dockerfile: serializer.Dockerfile
      args:
        data_format: xml
    env_file: env

  pickle:
    restart: unless-stopped
    networks: [serializers]
    image: 0442a403/hse:serializer-pickle
    build:
      dockerfile: serializer.Dockerfile
      args:
        data_format: pickle
    env_file: env

  proto:
    restart: unless-stopped
    networks: [serializers]
    image: 0442a403/hse:serializer-proto
    build:
      dockerfile: serializer.Dockerfile
      args:
        data_format: proto
    env_file: env

  avro:
    restart: unless-stopped
    networks: [serializers]
    image: 0442a403/hse:serializer-avro
    build:
      dockerfile: serializer.Dockerfile
      args:
        data_format: avro
    env_file: env

  msgpack:
    restart: unless-stopped
    networks: [serializers]
    image: 0442a403/hse:serializer-msgpack
    build:
      dockerfile: serializer.Dockerfile
      args:
        data_format: msgpack
    env_file: env

networks:
  serializers:
    name: serializers
